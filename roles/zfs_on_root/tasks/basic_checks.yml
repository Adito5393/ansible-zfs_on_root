---
# Fail if disk_devices not specified on command line for playbook
# This specifies the devices to wipe and install ZFS.
- fail: 
    msg: "ERROR: This playbook requires --extra-vars='{disk_devices: [sda,sdb],host_name: mydesktop}'"
  when: 
    disk_devices is undefined
  tags:
    - basic_checks

# Fail if hostname not specified on command line for import_playbook
- fail:
    msg: "ERROR: This playbook requires --extra-vars='{disk_devices: [sda,sdb],host_name: mydesktop}'"
  when:
    host_name is undefined
  tags:
    - basic_checks

# This playbook can never be run on localhost as it is destructive.
- fail:
    msg: "ERROR: This playbook can not be used on localhost."
  when:
    ansible_nodename == "localhost"
  tags:
    - basic_checks

# ZFS Native Encryption Passphrase must be 8 chars or longer
- fail:
    msg: "ERROR: ZFS passphase must be at least 8 characters."
  when:
    - passphrase is defined and passphrase|length <8

# Turn on encrypotion flags if a passphrase was set.
- set_fact:
    root_pool_encryption: true
  when: passphrase is defined
  tags:
    - basic_checks

# If passphrase was not set, just define it.
- set_fact:
    passphrase = "none"
  when: passphrase is undefined
  tags:
    - basic_checks

- debug:
    msg: "NOTE: Passphase Supplied -- Root Pool Encryption Enabled"
  when: root_pool_encryption is true
  tags: 
    - basic_checks

# Generate values used in File System Datasets
- name: Generate UUID
  shell:
    cmd: "dd if=/dev/urandom of=/dev/stdout bs=1 count=100 2>/dev/null | tr -dc 'a-z0-9' | cut -c-6"
  register:
    UUID
  tags:
    - basic_checks

- name: Generate Epoch value
  command:
    cmd: "date +%s"
  register:
    epoch
  tags:
    - basic_checks

- name: Display Generated Values
  debug:
    msg: "UUID Generated: {{UUID.stdout}}  Epoch: {{epoch.stdout}}"
  when:
    debug|default(false) == true
  tags:
    - basic_checks

  # Generate disk by-id for disk_devices
- set_fact:
    disk_by_id: "{{ disk_devices | map('extract', hostvars[inventory_hostname]['ansible_devices'], ['links', 'ids', 0]) | list | map('regex_replace', '^(.*)', '/dev/disk/by-id/\\g<1>') | list }}"
  tags:
    - basic_checks

- name: Display disk by-id for disk_devices
  debug:
    msg="{{ item }}"
  loop: 
    "{{ disk_by_id }}"
  when:
    debug|default(false) == true
  tags:
    - basic_checks
