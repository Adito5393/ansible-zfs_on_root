---
# If disk devices not specified on command line, detect available devices
- name: Detect available disk devices
  shell:
    cmd: "lsblk -d -o name,size,type,mountpoint | grep -v '/'"
  register: lsblk_devices
  when: 
    disk_devices is undefined
  tags:
    - basic_checks

# If disk devices not specified on command line, then prompt for it.
- pause:
    prompt: |
      #########################################################################
      This playbook requires that you define one or more disk devices to use.
      Each disk device specified will have its partitions erased and rebuilt
      using ZFS on Root recommendations based on Ubuntu 20.04.

      NOTE: You can specify devices to use as an ansible parameter using the
             extra-vars parameter, for example:
        
             --extra-vars='{disk_devices: [sda,sdb]}'
      #########################################################################

      Devices Detected:
      {{lsblk_devices.stdout}}


      Please enter a comma separated list of devices to use such as: sda,sdb
      OR press CTRL-C to Abort:
    echo: yes
  when: 
    disk_devices is undefined
  register: 
    prompt
  tags:
  - basic_checks

# If user provided input, then convert comma seperated values into a list.
- set_fact:
    disk_devices: "{{prompt.user_input.split(',')}}"
  when: 
    disk_devices is undefined
  tags:
    - basic_checks

# If host_name not specified on command line, then prompt for it.
- pause:
    prompt: |
      #########################################################################
      This playbook requires that you define a hostname to be used for the 
      new system being created.

      NOTE: You can specify the hostname to use as an ansible parameter using
            the extra-vars parameter, for example:
        
             --extra-vars='{host_name: "mynewpc"}'
      #########################################################################

      Default Value:
      {{ansible_host.split(".")[0]|lower}}

      Please enter an alternate hostname or ENTER to accept the default.
      OR press CTRL-C to Abort:
    echo: yes
  when: 
    host_name is undefined
  register: 
    prompt
  tags:
  - basic_checks

# If user provided input was only pressing ENTER to accept the default, then set default value
- set_fact:
    host_name: "{{ansible_host.split('.')[0]|lower}}"
  when:
    prompt.user_input == ""
  tags:
    - basic_checks

# If user provided input, then convert comma seperated values into a list.
- set_fact:
    host_name: "{{prompt.user_input.split('.')[0]|lower}}"
  when: 
    host_name is undefined
  tags:
    - basic_checks

# This playbook can never be run on localhost as it is destructive.
- fail:
    msg: "ERROR: This playbook can not be used on localhost."
  when:
    ansible_nodename == "localhost"
  tags:
    - basic_checks

# ZFS Native Encryption Passphrase must be 8 chars or longer
- fail:
    msg: "ERROR: ZFS passphase must be at least 8 characters."
  when:
    - passphrase is defined and passphrase|length <8

# Turn on encrypotion flags if a passphrase was set.
- set_fact:
    root_pool_encryption: true
  when: passphrase is defined
  tags:
    - basic_checks

# If passphrase was not set, just define it.
- set_fact:
    passphrase = "none"
  when: passphrase is undefined
  tags:
    - basic_checks

- debug:
    msg: "NOTE: Passphase Supplied -- Root Pool Encryption Enabled"
  when: root_pool_encryption is true
  tags: 
    - basic_checks

# Generate values used in File System Datasets
- name: Generate UUID
  shell:
    cmd: "dd if=/dev/urandom of=/dev/stdout bs=1 count=100 2>/dev/null | tr -dc 'a-z0-9' | cut -c-6"
  register:
    UUID
  tags:
    - basic_checks

- name: Generate Epoch value
  command:
    cmd: "date +%s"
  register:
    epoch
  tags:
    - basic_checks

- name: Display Generated Values
  debug:
    msg: "UUID Generated: {{UUID.stdout}}  Epoch: {{epoch.stdout}}"
  when:
    debug|default(false) == true
  tags:
    - basic_checks

  # Generate disk by-id for disk_devices
- set_fact:
    disk_by_id: "{{ disk_devices | map('extract', hostvars[inventory_hostname]['ansible_devices'], ['links', 'ids', 0]) | list | map('regex_replace', '^(.*)', '/dev/disk/by-id/\\g<1>') | list }}"
  tags:
    - basic_checks

- name: Display disk by-id for disk_devices
  debug:
    msg="{{ item }}"
  loop: 
    "{{ disk_by_id }}"
  when:
    debug|default(false) == true
  tags:
    - basic_checks

# If boot using UEFI specifed, then Ubuntu Live CD should have detected this.
# Path /sys/firmware/efi must exist, otherwise only legacy booting can be used.
- name: Confirm UEFI environment exists.
  stat:
    path: "{{efi_firmware_path}}"
  register: efi_firmware_directory
  when:
    - use_uefi_booting|default(false)|bool == true
  tags:
    - basic_checks

# if {{efi_firmware_path}} is a vaild path, then this would be defined. If not, fail.
- fail:
   msg: "UEFI Booting Enabled but UEFI was not detected by {{distro_name}}"
  when:
    - use_uefi_booting|default(false)|bool == true
    - efi_firmware_directory is not defined
  tags:
    - basic_checks
