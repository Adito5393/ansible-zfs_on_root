---
# [ Prepare for First Reboot ]#################################################
- name: Prepare for First Reboot Block
  when:
    - ansible_nodename != "localhost"
  tags:
    - first_boot_prep
  block:

    - name: Run chroot command add ansible user account (password disabled)
      ansible.builtin.command:
        "{{ chroot_cmd }} bash -c 'adduser {{ ansible_user }} --disabled-password --gecos Ansible_User'"
      args:
        creates: "{{ live_cd_mountpoint }}/home/{{ ansible_user }}"

    - name: Copy over ansible sudoers include file to chroot environment
      ansible.builtin.copy:
        src: "{{ sudoers_include_file }}"
        dest: "{{ live_cd_mountpoint }}/{{ sudoers_include_file }}"
        mode: "0644"
        remote_src: true

    - name: Copy over ansible ssh key to chroot environment
      ansible.builtin.copy: # noqa risky-file-permissions
        src: "/home/{{ ansible_user }}/.ssh"
        dest: "{{ live_cd_mountpoint }}/home/{{ ansible_user }}/"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        remote_src: true

    # [ Start Upgrading install ]##############################################
    - name: Run chroot commands to run distr-upgrade
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "apt-get -qq --yes dist-upgrade"

    - name: Run chroot commands to enable acpid if detected
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "[ -d /proc/acpi ] && apt-get -qq --yes install acpi acpid && systemctl enable acpid"

    - name: Add nicer PS1 USER prompt
      ansible.builtin.lineinfile: # noqa yaml[line-length]
        path: "{{ item }}"
        line: 'PS1="${debian_chroot:+($debian_chroot)}\[\$(tput setaf 2)\]\u@\[\$(tput bold)\]\[\$(tput setaf 5)\]\h\[\$(tput sgr0)\]\[\$(tput setaf 7)\]:\[\$(tput bold)\]\[\$(tput setaf 4)\]\w\[\$(tput setaf 7)\]\\$ \[\$(tput sgr0)\]"'
        state: present
        backup: true
      with_items:
        - "{{ live_cd_mountpoint }}/etc/bash.bashrc"
        - "{{ live_cd_mountpoint }}/etc/skel/.bashrc"

    - name: Add nicer PS1 ROOT prompt
      ansible.builtin.lineinfile: # noqa yaml[line-length]
        path: "{{ live_cd_mountpoint }}/root/.bashrc"
        line: "{{ item }}"
        state: present
        backup: true
      with_items:
        - 'PS1="\[\033[01;37m\]\[\033[01;41m\]\u@\[\033[00m\]\[$(tput bold)\]\[$(tput setaf 5)\]\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$ "'

    # Update ZFS Encryption Key Location
    - name: Run chroot commands Update ZFS Encryption Key Location
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      no_log: "{{ no_log_secrets | default(true) }}"
      with_items:
        - "echo '{{ passphrase }}' > /etc/zfs/zroot.key"
        - "chmod 600 /etc/zfs/zroot.key"
        - "zfs change-key -o keylocation=file:///etc/zfs/zroot.key -o keyformat=passphrase {{ root_pool_name }}/ROOT"
      when:
        - root_pool_encryption | default(false)

    - name: Add zfs zroot.key reference to dracut
      ansible.builtin.lineinfile:
        path: "{{ live_cd_mountpoint }}/etc/dracut.conf.d/zfskey.conf"
        line: 'install_items+=" /etc/zfs/zroot.key "'
        create: true
        mode: "0644"
        state: present
        backup: true
      when:
        - root_pool_encryption | default(false)

    - name: Run chroot commands for Dracut Generate
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "dracut -v -f --regenerate-all"
        # generate-zbm only there if we built from scratch, not using downloaded image
        - "[ -e /usr/bin/generate-zbm ] && generate-zbm --debug"

    - name: Removing os-prober (only needed on dual-boot systems)
      ansible.builtin.command: "{{ chroot_cmd }} bash -c 'dpkg --purge os-prober'"
      when:
        - remove_os_prober | default(false) | bool

    - name: Run chroot command to set default root password
      ansible.builtin.expect:
        command: "{{ chroot_cmd }} bash -c 'passwd'"
        responses:
          (?i)password: "{{ default_root_password }}"
      no_log: "{{ no_log_secrets | default(true) }}"
